sidebarErrors = []
sidebarSuccesses = []

doExport = ->
  search = Browser.inputBox('JQL Search', getLastQuery(), Browser.Buttons.OK_CANCEL)
  if search == 'cancel'
    return
  userProperties = PropertiesService.getUserProperties()
  jira = new Jira
  jira.username = userProperties.getProperty('username')
  jira.password = userProperties.getProperty('password')
  jira.host = userProperties.getProperty('host')
  jira.advancedSearch search, { startAt: 0 }, (err, res) ->
    if err
      Logger.log err
      Browser.msgBox err
    else
      res.issues = res.issues.map((issue) ->
        issueToSheetRow issue
      )
      jsonToActiveSpreadsheet res.issues
      # TODO: setColumnDataValidation('Business Unit', "'DataValidation'!B2:B4")
    return
  setLastQuery search
  addNoteToActiveCell search
  return

doImport = ->
  `var sidebarSuccesses`
  # TODO: update the status on import using 'transitions' https://docs.atlassian.com/jira/REST/cloud/#api/2/issue-getTransitions
  # TODO: add story points
  # TODO: Update spreadsheet data with any new values (key, reporter, etc)
  userProperties = PropertiesService.getUserProperties()
  jira = new Jira
  jira.username = userProperties.getProperty('username')
  jira.password = userProperties.getProperty('password')
  jira.host = userProperties.getProperty('host')
  issues = activeSpreadsheetToJson()
  i = undefined
  issue = undefined
  len = undefined
  sidebarSuccesses = []
  i = 0
  len = issues.length
  while i < len
    issue = issues[i]
    if issue['Key']
      updateIssue issue
    else if issue['Summary']
      payload = 'fields':
        'project': 'key': issue['Project']
        'summary': issue['Summary']
        'description': issue['Description']
        'assignee': name: issue['Assignee']
        'issuetype': 'name': issue['Issue Type'] or 'Story'
        'customfield_11300': [ { 'id': getBusinessUnitId(issue['Business Unit']) } ]
        'customfield_10004': issue['Story Points'] or 0
      jira.createIssue payload, null, (err, res) ->
        if err
          Logger.log err
          sidebarErrors.push err
        else
          sidebarSuccesses.push 'Successfully created ' + res
        return
    showSidebar
      sidebarErrors: sidebarErrors
      sidebarSuccesses: sidebarSuccesses
    i++
  return

setCreds = ->
  userProperties = PropertiesService.getUserProperties()
  username = Browser.inputBox('Jira Username', '', Browser.Buttons.OK)
  password = Browser.inputBox('Jira Password', 'Enter your password. This is stored as data only accessable by your Google account.', Browser.Buttons.OK)
  host = Browser.inputBox('Jira Host', 'The Jira host you connect to. For example, mycompany.atlassian.net', Browser.Buttons.OK)
  userProperties.setProperty 'username', username
  userProperties.setProperty 'password', password
  userProperties.setProperty 'host', host
  return

showSidebar = (sidebarData) ->
  html = HtmlService.createTemplateFromFile('Sidebar')
  html.data = sidebarData
  SpreadsheetApp.getUi().showSidebar html.evaluate()
  return

updateIssue = (issue) ->
  Logger.log 'Updating issue'
  # Fields that can be updated: Assignee, Comment, Components, Description, Fix Versions, Labels, Priority, Summary, Affected Versions, Worklog
  # https://developer.atlassian.com/jiradev/jira-apis/jira-rest-apis/jira-rest-api-tutorials/updating-an-issue-via-the-jira-rest-apis
  payload = update:
    summary: [ { set: issue['Summary'] } ]
    assignee: [ { set: name: issue['Assignee'] } ]
    priority: [ { set: name: issue['Priority'] or 'Normal' } ]
    description: [ { set: issue['Description'] } ]
  if issue['Story Points']
    payload.update['customfield_10004'] = [ { set: issue['Story Points'] } ]
  if issue['Business Unit']
    payload.update['customfield_11300'] = [ { set: [ { 'id': getBusinessUnitId(issue['Business Unit']) } ] } ]
  userProperties = PropertiesService.getUserProperties()
  jira = new Jira
  jira.username = userProperties.getProperty('username')
  jira.password = userProperties.getProperty('password')
  jira.host = userProperties.getProperty('host')
  jira.update issue['Key'], null, payload, (err, res) ->
    if err
      Logger.log err
      Logger.log res
      sidebarErrors.push err
    else
      Logger.log res
      sidebarSuccesses.push 'Successfully created ' + res
    return
  showSidebar
    sidebarErrors: sidebarErrors
    sidebarSuccesses: sidebarSuccesses
  return

# ---
# generated by js2coffee 2.2.0