parseSprint = (customfield_10007) ->
  re = new RegExp(/com.atlassian.greenhopper.service.sprint.Sprint@.*\[id=([0-9]+),rapidViewId=([0-9]+),state=([A-Za-z]+),name=([^,;]+),goal=([^,;]+)?,startDate=([^,;]+),endDate=([^,;]+),completeDate=([^,;]+),sequence=([^\];]+)/)
  defaultSprintName = documentProperties.getProperty('Project Key') + ' Backlog'
  try
    cf = JSON.stringify(customfield_10007).match(re)
  catch e
    return { name: defaultSprintName }
  if !cf
    return { name: defaultSprintName }
  {
    id: cf[1]
    rapidViewId: cf[2]
    state: cf[3]
    name: cf[4]
    goal: cf[5]
    startDate: cf[6]
    endDate: cf[7]
    completeDate: cf[8]
    sequence: cf[9]
  }

issueToSheetRow = (issue) ->
  {
    'Project': issue.fields.project.key
    'Key': issue.key
    'Assignee': (if typeof issue.fields.assignee != 'undefined' and issue.fields.assignee != null then issue.fields.assignee.name else undefined) or ''
    'Summary': issue.fields.summary
    'Description': issue.fields.description
    'Status': issue.fields.status.name
    'Story Points': (if typeof issue.fields.customfield_10004 != 'undefined' and issue.fields.customfield_10004 != null then issue.fields.customfield_10004 else undefined) or ''
    'Business Unit': (if issue.fields.customfield_11300 != null then issue.fields['customfield_11300'][0].value else undefined) or ''
    'Priority': issue.fields.priority.name
  }

getOrCreateSheet = (sheetName) ->
  ss = SpreadsheetApp.getActiveSpreadsheet()
  sheet = ss.getSheetByName(sheetName)
  if sheet != null
    sheet
  else
    ss.insertSheet sheetName, template: ss.getSheetByName('sprintTemplate')

syncSprints = ->
  # syncEpics()
  userProperties = PropertiesService.getUserProperties()
  documentProperties = PropertiesService.getDocumentProperties()
  jira = new Jira
  jira.username = userProperties.getProperty('username')
  jira.password = userProperties.getProperty('password')
  jira.host = userProperties.getProperty('host')
  jira.advancedSearch 'project = ' + documentProperties.getProperty('Project Key') + ' AND type = Story AND updatedDate > startOfYear()', {
    startAt: 0
    maxResults: 1000
  }, (err, res) ->
    if err
      Logger.log err
      Browser.msgBox err
    else
      sprints = {}
      res.issues.map (issue) ->
        sprint = parseSprint(issue.fields.customfield_10007[0])
        if !sprints[sprint.name]
          sprints[sprint.name] = []
        sprints[sprint.name].push issueToSheetRow(issue)
        return
      for sprint of sprints
        `sprint = sprint`
        issues = sprints[sprint]
        jsonToSheet issues, getOrCreateSheet(sprint)
    return
  return

# ---
# generated by js2coffee 2.2.0