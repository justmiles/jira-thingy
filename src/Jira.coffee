Jira = do ->
  `var Jira`

  Jira = (version) ->
    if version == null
      @version = 2
    return

  Jira::_request = (method, api, params, payload, callback) ->
    res = undefined
    that = this
    response = undefined
    options = undefined
    payloadString = undefined
    req = undefined
    if params == null
      params = ''
    else
      params = toURL(params)
    path = api + params
    options =
      'method': method
      'Accept': 'application/json'
      'muteHttpExceptions': true
      'headers':
        'AuthenticationHeader': 'Basic ' + Utilities.base64Encode(@username + ':' + @password)
        'Authorization': 'Basic ' + Utilities.base64Encode(@username + ':' + @password)
        'Content-Type': 'application/json'
    if payload != null
      payloadString = JSON.stringify(payload)
      Logger.log 'Payload string ' + payloadString
      options.payload = payloadString
    Logger.log 'https://' + that.host + path
    Logger.log options
    res = UrlFetchApp.fetch('https://' + that.host + path, options)
    if !res.getResponseCode().toString().match(/2[0-9][0-9]/)
      errMessage = 'Error retrieving data for ' + path + '. Recieved ' + res.getResponseCode()
      errors = JSON.parse(res.getContentText())['errors']
      Logger.log errors
      errorKeys = Object.keys(errors)
      i = 0
      len = errorKeys.length
      while i < len
        error = errorKeys[i]
        errorMsg = errors[error]
        Logger.log error
        Logger.log errorMsg
        errMessage += '\n       ' + error + ':  ' + errorMsg + '\n\n'
        i++
      return callback(errMessage, res)
    e = undefined
    jsonResponse = undefined
    msg = undefined
    try
      jsonResponse = JSON.parse(res.getContentText())
    catch _error
      e = _error
      return callback(null, res.getContentText())
    callback null, jsonResponse

  Jira::getIssue = (issueID, params, callback) ->
    @_request 'GET', '/rest/api/2/issue/' + issueID, params, null, callback

  Jira::createIssue = (issue, params, callback) ->
    if params == null
      params = {}
    @_request 'POST', '/rest/api/2/issue', params, issue, callback

  Jira::createRemoteLink = (issueKey, url, title, callback) ->
    body = undefined
    body = object:
      url: url
      title: title
    @_request 'POST', '/rest/api/2/issue/' + issueKey + '/remotelink', null, body, callback

  Jira::setAssignee = (issueKey, assignee, callback) ->
    body = undefined
    body = name: assignee
    @_request 'PUT', '/rest/api/2/issue/' + issueKey + '/assignee', null, body, callback

  Jira::update = (issueKey, params, payload, callback) ->
    @_request 'PUT', '/rest/api/2/issue/' + issueKey, params, payload, callback

  Jira::transition = (issueKey, params, payload, callback) ->
    @_request 'POST', '/rest/api/2/issue/' + issueKey + '/transitions', params, payload, callback

  Jira::simpleSearch = (query, params, callback) ->
    if params == null
      params = {}
    params.jql = 'text~' + query
    @_request 'GET', '/rest/api/2/search', params, null, callback

  Jira::advancedSearch = (jql, params, callback) ->
    if params == null
      params = {}
    params.jql = jql
    @_request 'GET', '/rest/api/2/search', params, null, callback

  Jira

# ---
# generated by js2coffee 2.2.0